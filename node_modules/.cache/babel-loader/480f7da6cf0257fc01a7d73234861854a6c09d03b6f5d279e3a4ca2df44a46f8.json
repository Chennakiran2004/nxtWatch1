{"ast":null,"code":"// import { Component } from \"react\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { IoMdClose } from \"react-icons/io\";\n\n// import { BsSearch } from \"react-icons/bs\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import HomeBody from \"../HomeBody\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import Layout from \"../Layout\";\n\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/logoUrl\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi from \"../../Constants/fetchUtilities\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// // import {VIDEO_SEARCH_API} from '../../Constants/videoSearchAPI'\n\n// import {\n//   HomeMainContainer,\n//   HomeContainer,\n//   SearchContainer,\n//   SearchInput,\n//   SearchButton,\n//   GetPremium,\n//   CloseButton,\n//   BannerLogo,\n//   BannerText,\n//   GetItButton,\n//   LoaderContainer,\n//   VideosList,\n//   NoVideosContainer,\n//   NoVideosImg,\n//   FailureText,\n//   RetryButton,\n//   FailureContainer,\n//   FailureImg,\n// } from \"./styledComponents\";\n\n// class Home extends Component {\n//   state = {\n//     isPopup: true,\n//     searchInput: \"\",\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount = () => {\n//     this.getVideos();\n//   };\n\n//   onClickCloseBanner = () => {\n//     this.setState({ isPopup: false });\n//   };\n\n//   renderAddPopup = () => (\n//     <GetPremium data-testid=\"banner\">\n//       <CloseButton\n//         type=\"button\"\n//         data-testid=\"close\"\n//         onClick={this.onClickCloseBanner}\n//       >\n//         <IoMdClose size={16} />\n//       </CloseButton>\n//       <BannerLogo\n//         src=\"https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-light-theme-img.png\"\n//         alt=\"nxt watch logo\"\n//       />\n//       <BannerText>Buy Nxt Watch Premium prepaid plans with UPI</BannerText>\n//       <GetItButton>GET IT NOW</GetItButton>\n//     </GetPremium>\n//   );\n\n//   updateSearchInput = (event) => {\n//     this.setState({ searchInput: event.target.value });\n//   };\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n//     const { searchInput } = this.state;\n\n//     const jwtToken = getCookie();\n\n//     const url = `https://apis.ccbp.in/videos/all?search=${searchInput}`;\n\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem) => ({\n//         id: eachItem.id,\n//         channel: {\n//           name: eachItem.channel.name,\n//           profileImageUrl: eachItem.channel.profile_image_url,\n//         },\n//         publishedAt: eachItem.published_at,\n//         viewCount: eachItem.view_count,\n//         title: eachItem.title,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   noVideosView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//         return (\n//           <NoVideosContainer>\n//             <NoVideosImg\n//               src=\"https://assets.ccbp.in/frontend/react-js/nxt-watch-no-search-results-img.png\"\n//               alt=\"no videos\"\n//             />\n//             <FailureText theme={theme}>No search results found</FailureText>\n//             <FailureText theme={theme}>\n//               Try different key words or remove search filter\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </NoVideosContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getSuccessView = () => {\n//     const { videosList } = this.state;\n//     console.log(videosList);\n\n//     if (videosList.length === 0) {\n//       return this.noVideosView();\n//     }\n\n//     return (\n//       <VideosList>\n//         {videosList.map((each) => (\n//           <HomeBody key={each.id} videoDetails={each} />\n//         ))}\n//       </VideosList>\n//     );\n//   };\n\n//   renderUIBasedOnAPIStatus = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return null;\n//     }\n//   };\n\n//   failureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme} as=\"p\">\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   render() {\n//     const { isPopup, searchInput } = this.state;\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           const color = isDarkTheme ? \"#f9f9f9\" : \"#181818\";\n//           console.log(theme);\n//           return (\n//             <>\n//               <Layout>\n//                 <HomeMainContainer theme={theme}>\n//                   <HomeContainer theme={theme}>\n//                     {isPopup && this.renderAddPopup()}\n//                     <SearchContainer>\n//                       <SearchInput\n//                         theme={theme}\n//                         type=\"search\"\n//                         placeholder=\"Search\"\n//                         onChange={this.updateSearchInput}\n//                         value={searchInput}\n//                       />\n//                       <SearchButton\n//                         theme={theme}\n//                         type=\"button\"\n//                         data-testid=\"searchButton\"\n//                         onClick={this.getVideos}\n//                       >\n//                         <BsSearch color={color} />\n//                       </SearchButton>\n//                     </SearchContainer>\n//                     {this.renderUIBasedOnAPIStatus()}\n//                   </HomeContainer>\n//                 </HomeMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Home;","map":{"version":3,"names":[],"sources":["/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/Home/index.tsx"],"sourcesContent":["// import { Component } from \"react\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { IoMdClose } from \"react-icons/io\";\n\n// import { BsSearch } from \"react-icons/bs\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import HomeBody from \"../HomeBody\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import Layout from \"../Layout\";\n\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/logoUrl\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi from \"../../Constants/fetchUtilities\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// // import {VIDEO_SEARCH_API} from '../../Constants/videoSearchAPI'\n\n// import {\n//   HomeMainContainer,\n//   HomeContainer,\n//   SearchContainer,\n//   SearchInput,\n//   SearchButton,\n//   GetPremium,\n//   CloseButton,\n//   BannerLogo,\n//   BannerText,\n//   GetItButton,\n//   LoaderContainer,\n//   VideosList,\n//   NoVideosContainer,\n//   NoVideosImg,\n//   FailureText,\n//   RetryButton,\n//   FailureContainer,\n//   FailureImg,\n// } from \"./styledComponents\";\n\n// class Home extends Component {\n//   state = {\n//     isPopup: true,\n//     searchInput: \"\",\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount = () => {\n//     this.getVideos();\n//   };\n\n//   onClickCloseBanner = () => {\n//     this.setState({ isPopup: false });\n//   };\n\n//   renderAddPopup = () => (\n//     <GetPremium data-testid=\"banner\">\n//       <CloseButton\n//         type=\"button\"\n//         data-testid=\"close\"\n//         onClick={this.onClickCloseBanner}\n//       >\n//         <IoMdClose size={16} />\n//       </CloseButton>\n//       <BannerLogo\n//         src=\"https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-light-theme-img.png\"\n//         alt=\"nxt watch logo\"\n//       />\n//       <BannerText>Buy Nxt Watch Premium prepaid plans with UPI</BannerText>\n//       <GetItButton>GET IT NOW</GetItButton>\n//     </GetPremium>\n//   );\n\n//   updateSearchInput = (event) => {\n//     this.setState({ searchInput: event.target.value });\n//   };\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n//     const { searchInput } = this.state;\n\n//     const jwtToken = getCookie();\n\n//     const url = `https://apis.ccbp.in/videos/all?search=${searchInput}`;\n\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem) => ({\n//         id: eachItem.id,\n//         channel: {\n//           name: eachItem.channel.name,\n//           profileImageUrl: eachItem.channel.profile_image_url,\n//         },\n//         publishedAt: eachItem.published_at,\n//         viewCount: eachItem.view_count,\n//         title: eachItem.title,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   noVideosView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//         return (\n//           <NoVideosContainer>\n//             <NoVideosImg\n//               src=\"https://assets.ccbp.in/frontend/react-js/nxt-watch-no-search-results-img.png\"\n//               alt=\"no videos\"\n//             />\n//             <FailureText theme={theme}>No search results found</FailureText>\n//             <FailureText theme={theme}>\n//               Try different key words or remove search filter\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </NoVideosContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getSuccessView = () => {\n//     const { videosList } = this.state;\n//     console.log(videosList);\n\n//     if (videosList.length === 0) {\n//       return this.noVideosView();\n//     }\n\n//     return (\n//       <VideosList>\n//         {videosList.map((each) => (\n//           <HomeBody key={each.id} videoDetails={each} />\n//         ))}\n//       </VideosList>\n//     );\n//   };\n\n//   renderUIBasedOnAPIStatus = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return null;\n//     }\n//   };\n\n//   failureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme} as=\"p\">\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   render() {\n//     const { isPopup, searchInput } = this.state;\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           const color = isDarkTheme ? \"#f9f9f9\" : \"#181818\";\n//           console.log(theme);\n//           return (\n//             <>\n//               <Layout>\n//                 <HomeMainContainer theme={theme}>\n//                   <HomeContainer theme={theme}>\n//                     {isPopup && this.renderAddPopup()}\n//                     <SearchContainer>\n//                       <SearchInput\n//                         theme={theme}\n//                         type=\"search\"\n//                         placeholder=\"Search\"\n//                         onChange={this.updateSearchInput}\n//                         value={searchInput}\n//                       />\n//                       <SearchButton\n//                         theme={theme}\n//                         type=\"button\"\n//                         data-testid=\"searchButton\"\n//                         onClick={this.getVideos}\n//                       >\n//                         <BsSearch color={color} />\n//                       </SearchButton>\n//                     </SearchContainer>\n//                     {this.renderUIBasedOnAPIStatus()}\n//                   </HomeContainer>\n//                 </HomeMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Home;\n"],"mappings":"AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}