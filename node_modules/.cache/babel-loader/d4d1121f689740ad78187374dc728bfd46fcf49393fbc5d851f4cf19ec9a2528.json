{"ast":null,"code":"var _jsxFileName = \"/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/Gaming/index.tsx\";\n// import React, { Component, ReactElement } from \"react\";\n// import Loader from \"react-loader-spinner\";\n// import { IoLogoGameControllerB } from \"react-icons/io\";\n// import ThemeContext from \"../../Context/ThemeContext\";\n// import GamingBody from \"../GamingBody\";\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n// import Layout from \"../Layout\";\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/failureImageUrl\";\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n// import {\n//   GamingMainContainer,\n//   MainBody,\n//   GamingContainer,\n//   GamingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   VideosList,\n//   FailureContainer,\n//   FailureText,\n//   FailureImg,\n//   RetryButton,\n// } from \"./styledComponents\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi, { APIResponse } from \"../../Constants/fetchUtilities\";\n\n// interface VideoDetails {\n//   id: string;\n//   thumbnailUrl: string;\n//   title: string;\n//   viewCount: number;\n// }\n\n// type GamingState = {\n//   apiStatus: string;\n//   videosList: VideoDetails[];\n// };\n\n// class Gaming extends Component<{}, GamingState> {\n//   state: GamingState = {\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount(): void {\n//     this.getVideos();\n//   }\n\n//   loader = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         return (\n//           <LoaderContainer theme={theme} data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//           // <h1>Loader</h1>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async (): Promise<void> => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie();\n\n//     const url = \"https://apis.ccbp.in/videos/gaming\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response: APIResponse = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem: any) => ({\n//         id: eachItem.id,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   getSuccessView = (): ReactElement => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {/* {videosList.map((eachVideo) => (\n//           <GamingBody key={eachVideo.id} gameDetails={eachVideo} />\n//         ))} */}\n//         videosList\n//       </VideosList>\n//     );\n//   };\n\n//   getFailureView = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value): ReactElement => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = (): ReactElement => {\n//     const { apiStatus } = this.state;\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render(): ReactElement {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           return (\n//             <>\n//               <Layout>\n//                 <GamingMainContainer data-testid=\"gaming\" theme={theme}>\n//                   <MainBody>\n//                     <GamingContainer>\n//                       <GamingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <IoLogoGameControllerB size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Gaming</MenuHeading>\n//                       </GamingMenuContainer>\n//                       {this.renderUIBasedOnAPIStatus()}\n//                     </GamingContainer>\n//                   </MainBody>\n//                 </GamingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Gaming;\n\nimport React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { IoLogoGameControllerB } from \"react-icons/io\";\nimport ThemeContext from \"../../Context/ThemeContext\";\nimport apiStatusConstants from \"../../Constants/apiStatusConstants\";\nimport Layout from \"../Layout\";\nimport { darkThemeFailureImgUrl, lightThemeFailureImgUrl } from \"../../Constants/failureImageUrl\";\nimport getAuthHeaders from \"../../Constants/getAuthHeaders\";\nimport { GamingMainContainer, MainBody, GamingContainer, GamingMenuContainer, IconContainer, MenuHeading, LoaderContainer, VideosList, FailureContainer, FailureText, FailureImg, RetryButton } from \"./styledComponents\";\nimport { getCookie } from \"../../Constants/StorageUtilities\";\nimport fetchApi from \"../../Constants/fetchUtilities\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Gaming extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      apiStatus: apiStatusConstants.initial,\n      videosList: []\n    };\n    this.loader = () => /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n      children: value => {\n        const {\n          isDarkTheme\n        } = value;\n        const theme = isDarkTheme ? \"dark\" : \"light\";\n        return /*#__PURE__*/_jsxDEV(LoaderContainer, {\n          theme: theme,\n          \"data-testid\": \"loader\",\n          children: /*#__PURE__*/_jsxDEV(Loader, {\n            type: \"ThreeDots\",\n            color: isDarkTheme ? \"#ffffff\" : \"#000000\",\n            height: 50 // Height should be a number, not a string\n            ,\n            width: 50 // Width should be a number, not a string\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }, this);\n    this.getVideos = async () => {\n      this.setState({\n        apiStatus: apiStatusConstants.inProgress\n      });\n      const jwtToken = getCookie();\n      const url = \"https://apis.ccbp.in/videos/gaming\";\n      const options = {\n        headers: getAuthHeaders(jwtToken),\n        method: \"GET\"\n      };\n      const response = await fetchApi(url, options);\n      if (response.success) {\n        const updatedData = response.data.videos.map(eachItem => ({\n          id: eachItem.id,\n          thumbnailUrl: eachItem.thumbnail_url,\n          title: eachItem.title,\n          viewCount: eachItem.view_count\n        }));\n        this.setState({\n          videosList: updatedData,\n          apiStatus: apiStatusConstants.success\n        });\n      } else {\n        this.setState({\n          apiStatus: apiStatusConstants.failure\n        });\n      }\n    };\n    this.getSuccessView = () => {\n      const {\n        videosList\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(VideosList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 7\n      }, this);\n    };\n    this.getFailureView = () => /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n      children: value => {\n        const {\n          isDarkTheme\n        } = value;\n        const theme = isDarkTheme ? \"dark\" : \"light\";\n        const imgUrl = isDarkTheme ? darkThemeFailureImgUrl : lightThemeFailureImgUrl;\n        return /*#__PURE__*/_jsxDEV(FailureContainer, {\n          children: [/*#__PURE__*/_jsxDEV(FailureImg, {\n            src: imgUrl,\n            alt: \"failure view\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FailureText, {\n            theme: theme,\n            children: \"Oops! Something Went Wrong\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FailureText, {\n            theme: theme,\n            children: \"We are having some trouble to complete your request. Please try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RetryButton, {\n            type: \"button\",\n            onClick: this.getVideos,\n            children: \"Retry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }, this);\n    this.renderUIBasedOnAPIStatus = () => {\n      const {\n        apiStatus\n      } = this.state;\n      switch (apiStatus) {\n        case apiStatusConstants.success:\n          return this.getSuccessView();\n        case apiStatusConstants.failure:\n          return this.getFailureView();\n        case apiStatusConstants.inProgress:\n          return this.loader();\n        default:\n          return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n    };\n  }\n  componentDidMount() {\n    this.getVideos();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n      children: value => {\n        const {\n          isDarkTheme\n        } = value;\n        const theme = isDarkTheme ? \"dark\" : \"light\";\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Layout, {\n            children: /*#__PURE__*/_jsxDEV(GamingMainContainer, {\n              \"data-testid\": \"gaming\",\n              theme: theme,\n              children: /*#__PURE__*/_jsxDEV(MainBody, {\n                children: /*#__PURE__*/_jsxDEV(GamingContainer, {\n                  children: [/*#__PURE__*/_jsxDEV(GamingMenuContainer, {\n                    theme: theme,\n                    children: [/*#__PURE__*/_jsxDEV(IconContainer, {\n                      theme: theme,\n                      children: /*#__PURE__*/_jsxDEV(IoLogoGameControllerB, {\n                        size: 40,\n                        color: \"#ff0b37\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 358,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(MenuHeading, {\n                      theme: theme,\n                      children: \"Gaming\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 23\n                  }, this), this.renderUIBasedOnAPIStatus()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Gaming;","map":{"version":3,"names":["React","Component","Loader","IoLogoGameControllerB","ThemeContext","apiStatusConstants","Layout","darkThemeFailureImgUrl","lightThemeFailureImgUrl","getAuthHeaders","GamingMainContainer","MainBody","GamingContainer","GamingMenuContainer","IconContainer","MenuHeading","LoaderContainer","VideosList","FailureContainer","FailureText","FailureImg","RetryButton","getCookie","fetchApi","jsxDEV","_jsxDEV","Fragment","_Fragment","Gaming","constructor","arguments","state","apiStatus","initial","videosList","loader","Consumer","children","value","isDarkTheme","theme","type","color","height","width","fileName","_jsxFileName","lineNumber","columnNumber","getVideos","setState","inProgress","jwtToken","url","options","headers","method","response","success","updatedData","data","videos","map","eachItem","id","thumbnailUrl","thumbnail_url","title","viewCount","view_count","failure","getSuccessView","getFailureView","imgUrl","src","alt","onClick","renderUIBasedOnAPIStatus","componentDidMount","render","size"],"sources":["/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/Gaming/index.tsx"],"sourcesContent":["// import React, { Component, ReactElement } from \"react\";\n// import Loader from \"react-loader-spinner\";\n// import { IoLogoGameControllerB } from \"react-icons/io\";\n// import ThemeContext from \"../../Context/ThemeContext\";\n// import GamingBody from \"../GamingBody\";\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n// import Layout from \"../Layout\";\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/failureImageUrl\";\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n// import {\n//   GamingMainContainer,\n//   MainBody,\n//   GamingContainer,\n//   GamingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   VideosList,\n//   FailureContainer,\n//   FailureText,\n//   FailureImg,\n//   RetryButton,\n// } from \"./styledComponents\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi, { APIResponse } from \"../../Constants/fetchUtilities\";\n\n// interface VideoDetails {\n//   id: string;\n//   thumbnailUrl: string;\n//   title: string;\n//   viewCount: number;\n// }\n\n// type GamingState = {\n//   apiStatus: string;\n//   videosList: VideoDetails[];\n// };\n\n// class Gaming extends Component<{}, GamingState> {\n//   state: GamingState = {\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount(): void {\n//     this.getVideos();\n//   }\n\n//   loader = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         return (\n//           <LoaderContainer theme={theme} data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//           // <h1>Loader</h1>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async (): Promise<void> => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie();\n\n//     const url = \"https://apis.ccbp.in/videos/gaming\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response: APIResponse = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem: any) => ({\n//         id: eachItem.id,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   getSuccessView = (): ReactElement => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {/* {videosList.map((eachVideo) => (\n//           <GamingBody key={eachVideo.id} gameDetails={eachVideo} />\n//         ))} */}\n//         videosList\n//       </VideosList>\n//     );\n//   };\n\n//   getFailureView = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value): ReactElement => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = (): ReactElement => {\n//     const { apiStatus } = this.state;\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render(): ReactElement {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           return (\n//             <>\n//               <Layout>\n//                 <GamingMainContainer data-testid=\"gaming\" theme={theme}>\n//                   <MainBody>\n//                     <GamingContainer>\n//                       <GamingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <IoLogoGameControllerB size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Gaming</MenuHeading>\n//                       </GamingMenuContainer>\n//                       {this.renderUIBasedOnAPIStatus()}\n//                     </GamingContainer>\n//                   </MainBody>\n//                 </GamingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Gaming;\n\nimport React, { Component, ReactElement } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { IoLogoGameControllerB } from \"react-icons/io\";\nimport ThemeContext from \"../../Context/ThemeContext\";\nimport GamingBody from \"../GamingBody\";\nimport apiStatusConstants from \"../../Constants/apiStatusConstants\";\nimport Layout from \"../Layout\";\nimport {\n  darkThemeFailureImgUrl,\n  lightThemeFailureImgUrl,\n} from \"../../Constants/failureImageUrl\";\nimport getAuthHeaders from \"../../Constants/getAuthHeaders\";\nimport {\n  GamingMainContainer,\n  MainBody,\n  GamingContainer,\n  GamingMenuContainer,\n  IconContainer,\n  MenuHeading,\n  LoaderContainer,\n  VideosList,\n  FailureContainer,\n  FailureText,\n  FailureImg,\n  RetryButton,\n} from \"./styledComponents\";\n\nimport { getCookie } from \"../../Constants/StorageUtilities\";\n\nimport fetchApi, { APIResponse } from \"../../Constants/fetchUtilities\";\n\ninterface VideoDetails {\n  id: string;\n  thumbnailUrl: string;\n  title: string;\n  viewCount: number;\n}\n\ntype GamingState = {\n  apiStatus: string;\n  videosList: VideoDetails[];\n};\n\nclass Gaming extends Component<{}, GamingState> {\n  state: GamingState = {\n    apiStatus: apiStatusConstants.initial,\n    videosList: [],\n  };\n\n  componentDidMount(): void {\n    this.getVideos();\n  }\n\n  loader = (): ReactElement => (\n    <ThemeContext.Consumer>\n      {(value) => {\n        const { isDarkTheme } = value;\n        const theme = isDarkTheme ? \"dark\" : \"light\";\n        return (\n          <LoaderContainer theme={theme} data-testid=\"loader\">\n            <Loader\n              type=\"ThreeDots\"\n              color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n              height={50} // Height should be a number, not a string\n              width={50} // Width should be a number, not a string\n            />\n          </LoaderContainer>\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n\n  getVideos = async (): Promise<void> => {\n    this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n    const jwtToken = getCookie();\n\n    const url = \"https://apis.ccbp.in/videos/gaming\";\n    const options = {\n      headers: getAuthHeaders(jwtToken),\n      method: \"GET\",\n    };\n\n    const response: APIResponse = await fetchApi(url, options);\n\n    if (response.success) {\n      const updatedData = response.data.videos.map((eachItem: any) => ({\n        id: eachItem.id,\n        thumbnailUrl: eachItem.thumbnail_url,\n        title: eachItem.title,\n        viewCount: eachItem.view_count,\n      }));\n      this.setState({\n        videosList: updatedData,\n        apiStatus: apiStatusConstants.success,\n      });\n    } else {\n      this.setState({ apiStatus: apiStatusConstants.failure });\n    }\n  };\n\n  getSuccessView = (): ReactElement => {\n    const { videosList } = this.state;\n\n    return (\n      <VideosList>\n        {/* {videosList.map((eachVideo) => (\n          <GamingBody key={eachVideo.id} gameDetails={eachVideo} />\n        ))} */}\n      </VideosList>\n    );\n  };\n\n  getFailureView = (): ReactElement => (\n    <ThemeContext.Consumer>\n      {(value): ReactElement => {\n        const { isDarkTheme } = value;\n        const theme = isDarkTheme ? \"dark\" : \"light\";\n        const imgUrl = isDarkTheme\n          ? darkThemeFailureImgUrl\n          : lightThemeFailureImgUrl;\n\n        return (\n          <FailureContainer>\n            <FailureImg src={imgUrl} alt=\"failure view\" />\n\n            <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n            <FailureText theme={theme}>\n              We are having some trouble to complete your request. Please try\n              again\n            </FailureText>\n            <RetryButton type=\"button\" onClick={this.getVideos}>\n              Retry\n            </RetryButton>\n          </FailureContainer>\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n\n  renderUIBasedOnAPIStatus = (): ReactElement => {\n    const { apiStatus } = this.state;\n    switch (apiStatus) {\n      case apiStatusConstants.success:\n        return this.getSuccessView();\n      case apiStatusConstants.failure:\n        return this.getFailureView();\n      case apiStatusConstants.inProgress:\n        return this.loader();\n      default:\n        return <></>;\n    }\n  };\n\n  render(): ReactElement {\n    return (\n      <ThemeContext.Consumer>\n        {(value) => {\n          const { isDarkTheme } = value;\n          const theme = isDarkTheme ? \"dark\" : \"light\";\n          return (\n            <>\n              <Layout>\n                <GamingMainContainer data-testid=\"gaming\" theme={theme}>\n                  <MainBody>\n                    <GamingContainer>\n                      <GamingMenuContainer theme={theme}>\n                        <IconContainer theme={theme}>\n                          <IoLogoGameControllerB size={40} color=\"#ff0b37\" />\n                        </IconContainer>\n                        <MenuHeading theme={theme}>Gaming</MenuHeading>\n                      </GamingMenuContainer>\n                      {this.renderUIBasedOnAPIStatus()}\n                    </GamingContainer>\n                  </MainBody>\n                </GamingMainContainer>\n              </Layout>\n            </>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nexport default Gaming;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAsB,OAAO;AACtD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,qBAAqB,QAAQ,gBAAgB;AACtD,OAAOC,YAAY,MAAM,4BAA4B;AAErD,OAAOC,kBAAkB,MAAM,oCAAoC;AACnE,OAAOC,MAAM,MAAM,WAAW;AAC9B,SACEC,sBAAsB,EACtBC,uBAAuB,QAClB,iCAAiC;AACxC,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,SACEC,mBAAmB,EACnBC,QAAQ,EACRC,eAAe,EACfC,mBAAmB,EACnBC,aAAa,EACbC,WAAW,EACXC,eAAe,EACfC,UAAU,EACVC,gBAAgB,EAChBC,WAAW,EACXC,UAAU,EACVC,WAAW,QACN,oBAAoB;AAE3B,SAASC,SAAS,QAAQ,kCAAkC;AAE5D,OAAOC,QAAQ,MAAuB,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAcvE,MAAMC,MAAM,SAAS3B,SAAS,CAAkB;EAAA4B,YAAA;IAAA,SAAAC,SAAA;IAAA,KAC9CC,KAAK,GAAgB;MACnBC,SAAS,EAAE3B,kBAAkB,CAAC4B,OAAO;MACrCC,UAAU,EAAE;IACd,CAAC;IAAA,KAMDC,MAAM,GAAG,mBACPV,OAAA,CAACrB,YAAY,CAACgC,QAAQ;MAAAC,QAAA,EAClBC,KAAK,IAAK;QACV,MAAM;UAAEC;QAAY,CAAC,GAAGD,KAAK;QAC7B,MAAME,KAAK,GAAGD,WAAW,GAAG,MAAM,GAAG,OAAO;QAC5C,oBACEd,OAAA,CAACT,eAAe;UAACwB,KAAK,EAAEA,KAAM;UAAC,eAAY,QAAQ;UAAAH,QAAA,eACjDZ,OAAA,CAACvB,MAAM;YACLuC,IAAI,EAAC,WAAW;YAChBC,KAAK,EAAEH,WAAW,GAAG,SAAS,GAAG,SAAU;YAC3CI,MAAM,EAAE,EAAG,CAAC;YAAA;YACZC,KAAK,EAAE,EAAG,CAAC;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACa,CAAC;MAEtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACoB,CACxB;IAAA,KAEDC,SAAS,GAAG,YAA2B;MACrC,IAAI,CAACC,QAAQ,CAAC;QAAElB,SAAS,EAAE3B,kBAAkB,CAAC8C;MAAW,CAAC,CAAC;MAE3D,MAAMC,QAAQ,GAAG9B,SAAS,CAAC,CAAC;MAE5B,MAAM+B,GAAG,GAAG,oCAAoC;MAChD,MAAMC,OAAO,GAAG;QACdC,OAAO,EAAE9C,cAAc,CAAC2C,QAAQ,CAAC;QACjCI,MAAM,EAAE;MACV,CAAC;MAED,MAAMC,QAAqB,GAAG,MAAMlC,QAAQ,CAAC8B,GAAG,EAAEC,OAAO,CAAC;MAE1D,IAAIG,QAAQ,CAACC,OAAO,EAAE;QACpB,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAACC,MAAM,CAACC,GAAG,CAAEC,QAAa,KAAM;UAC/DC,EAAE,EAAED,QAAQ,CAACC,EAAE;UACfC,YAAY,EAAEF,QAAQ,CAACG,aAAa;UACpCC,KAAK,EAAEJ,QAAQ,CAACI,KAAK;UACrBC,SAAS,EAAEL,QAAQ,CAACM;QACtB,CAAC,CAAC,CAAC;QACH,IAAI,CAACnB,QAAQ,CAAC;UACZhB,UAAU,EAAEyB,WAAW;UACvB3B,SAAS,EAAE3B,kBAAkB,CAACqD;QAChC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAI,CAACR,QAAQ,CAAC;UAAElB,SAAS,EAAE3B,kBAAkB,CAACiE;QAAQ,CAAC,CAAC;MAC1D;IACF,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAoB;MACnC,MAAM;QAAErC;MAAW,CAAC,GAAG,IAAI,CAACH,KAAK;MAEjC,oBACEN,OAAA,CAACR,UAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIC,CAAC;IAEjB,CAAC;IAAA,KAEDwB,cAAc,GAAG,mBACf/C,OAAA,CAACrB,YAAY,CAACgC,QAAQ;MAAAC,QAAA,EAClBC,KAAK,IAAmB;QACxB,MAAM;UAAEC;QAAY,CAAC,GAAGD,KAAK;QAC7B,MAAME,KAAK,GAAGD,WAAW,GAAG,MAAM,GAAG,OAAO;QAC5C,MAAMkC,MAAM,GAAGlC,WAAW,GACtBhC,sBAAsB,GACtBC,uBAAuB;QAE3B,oBACEiB,OAAA,CAACP,gBAAgB;UAAAmB,QAAA,gBACfZ,OAAA,CAACL,UAAU;YAACsD,GAAG,EAAED,MAAO;YAACE,GAAG,EAAC;UAAc;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAE9CvB,OAAA,CAACN,WAAW;YAACqB,KAAK,EAAEA,KAAM;YAAAH,QAAA,EAAC;UAA0B;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACnEvB,OAAA,CAACN,WAAW;YAACqB,KAAK,EAAEA,KAAM;YAAAH,QAAA,EAAC;UAG3B;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACdvB,OAAA,CAACJ,WAAW;YAACoB,IAAI,EAAC,QAAQ;YAACmC,OAAO,EAAE,IAAI,CAAC3B,SAAU;YAAAZ,QAAA,EAAC;UAEpD;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAEvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACoB,CACxB;IAAA,KAED6B,wBAAwB,GAAG,MAAoB;MAC7C,MAAM;QAAE7C;MAAU,CAAC,GAAG,IAAI,CAACD,KAAK;MAChC,QAAQC,SAAS;QACf,KAAK3B,kBAAkB,CAACqD,OAAO;UAC7B,OAAO,IAAI,CAACa,cAAc,CAAC,CAAC;QAC9B,KAAKlE,kBAAkB,CAACiE,OAAO;UAC7B,OAAO,IAAI,CAACE,cAAc,CAAC,CAAC;QAC9B,KAAKnE,kBAAkB,CAAC8C,UAAU;UAChC,OAAO,IAAI,CAAChB,MAAM,CAAC,CAAC;QACtB;UACE,oBAAOV,OAAA,CAAAE,SAAA,mBAAI,CAAC;MAChB;IACF,CAAC;EAAA;EAvGDmD,iBAAiBA,CAAA,EAAS;IACxB,IAAI,CAAC7B,SAAS,CAAC,CAAC;EAClB;EAuGA8B,MAAMA,CAAA,EAAiB;IACrB,oBACEtD,OAAA,CAACrB,YAAY,CAACgC,QAAQ;MAAAC,QAAA,EAClBC,KAAK,IAAK;QACV,MAAM;UAAEC;QAAY,CAAC,GAAGD,KAAK;QAC7B,MAAME,KAAK,GAAGD,WAAW,GAAG,MAAM,GAAG,OAAO;QAC5C,oBACEd,OAAA,CAAAE,SAAA;UAAAU,QAAA,eACEZ,OAAA,CAACnB,MAAM;YAAA+B,QAAA,eACLZ,OAAA,CAACf,mBAAmB;cAAC,eAAY,QAAQ;cAAC8B,KAAK,EAAEA,KAAM;cAAAH,QAAA,eACrDZ,OAAA,CAACd,QAAQ;gBAAA0B,QAAA,eACPZ,OAAA,CAACb,eAAe;kBAAAyB,QAAA,gBACdZ,OAAA,CAACZ,mBAAmB;oBAAC2B,KAAK,EAAEA,KAAM;oBAAAH,QAAA,gBAChCZ,OAAA,CAACX,aAAa;sBAAC0B,KAAK,EAAEA,KAAM;sBAAAH,QAAA,eAC1BZ,OAAA,CAACtB,qBAAqB;wBAAC6E,IAAI,EAAE,EAAG;wBAACtC,KAAK,EAAC;sBAAS;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACtC,CAAC,eAChBvB,OAAA,CAACV,WAAW;sBAACyB,KAAK,EAAEA,KAAM;sBAAAH,QAAA,EAAC;oBAAM;sBAAAQ,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAa,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5B,CAAC,EACrB,IAAI,CAAC6B,wBAAwB,CAAC,CAAC;gBAAA;kBAAAhC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjB;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACV;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB;QAAC,gBACT,CAAC;MAEP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACoB,CAAC;EAE5B;AACF;AAEA,eAAepB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}