{"ast":null,"code":"// import { Component } from \"react\";\n\n// import { formatDistanceToNow } from \"date-fns\";\n\n// import { BiLike, BiDislike } from \"react-icons/bi\";\n\n// import { RiMenuAddLine } from \"react-icons/ri\";\n\n// import ReactPlayer from \"react-player\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import Header from \"../Header\";\n\n// import Sidebar from \"../Sidebar\";\n\n// import SavedVideosContext from \"../../Context/SavedVideosContext\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// import {\n//   MainBody,\n//   SidebarContainer,\n//   FailureImg,\n//   FailureContainer,\n//   FailureText,\n//   RetryButton,\n//   LoaderContainer,\n//   VideoItemDetailsContainer,\n//   PlayerContainer,\n//   VideoDetailContainer,\n//   VideoTextContainer,\n//   VideoTitle,\n//   ViewsAndPostedContainer,\n//   LikesAndViewsContainer,\n//   ViewsText,\n//   Button,\n//   ChannelLogo,\n//   ChannelDetails,\n//   ChannelDetailsText,\n//   ChannelDetailsText2,\n//   VideoDescriptionText,\n// } from \"./styledComponents\";\n\n// class VideoItemDetails extends Component {\n//   state = {\n//     apiStatus: apiStatusConstants.initial,\n//     videoDetails: {},\n//     like: false,\n//     dislike: false,\n//   };\n\n//   componentDidMount() {\n//     this.getVideoDetails();\n//   }\n\n//   updateLikeState = () => {\n//     this.setState((previousState) => ({\n//       like: !previousState.like,\n//       dislike: false,\n//     }));\n//   };\n\n//   updateDislikeState = () => {\n//     this.setState((previousState) => ({\n//       dislike: !previousState.dislike,\n//       like: false,\n//     }));\n//   };\n\n//   getVideoDetails = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const { match } = this.props;\n//     const { params } = match;\n//     const { id } = params;\n\n//     const url = `https://apis.ccbp.in/videos/${id}`;\n//     const jwtToken = getCookie();\n\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetch(url, options);\n//     const data = await response.json();\n\n//     if (response.ok) {\n//       const updatedData = {\n//         videoDetails: data.video_details,\n//       };\n//       const { videoDetails } = updatedData;\n//       const updated = {\n//         id: videoDetails.id,\n//         description: videoDetails.description,\n//         publishedAt: videoDetails.published_at,\n//         thumbnailUrl: videoDetails.thumbnail_url,\n//         title: videoDetails.title,\n//         videoUrl: videoDetails.video_url,\n//         viewCount: videoDetails.view_count,\n//         channel: {\n//           name: videoDetails.channel.name,\n//           profileImageUrl: videoDetails.channel.profile_image_url,\n//           subscriberCount: videoDetails.channel.subscriber_count,\n//         },\n//       };\n//       this.setState({\n//         videoDetails: updated,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   successView = () => {\n//     const { videoDetails, like, dislike } = this.state;\n//     const {\n//       publishedAt,\n//       title,\n//       videoUrl,\n//       viewCount,\n//       channel,\n//       description,\n//       id,\n//     } = videoDetails;\n\n//     const { name, profileImageUrl, subscriberCount } = channel;\n//     let postedAt = formatDistanceToNow(new Date(publishedAt));\n//     const postedAtList = postedAt.split(\" \");\n\n//     if (postedAtList.length === 3) {\n//       postedAtList.shift();\n//       postedAt = postedAtList.join(\" \");\n//     }\n\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           const likeIsActive = like ? \"active\" : \"not-active\";\n//           const dislikeIsActive = dislike ? \"active\" : \"not-active\";\n//           return (\n//             <VideoDetailContainer>\n//               <PlayerContainer>\n//                 <ReactPlayer\n//                   url={videoUrl}\n//                   controls\n//                   width=\"100%\"\n//                   height=\"100%\"\n//                 />\n//               </PlayerContainer>\n//               <VideoTextContainer>\n//                 <VideoTitle theme={theme}>{title}</VideoTitle>\n//                 <LikesAndViewsContainer>\n//                   <ViewsAndPostedContainer>\n//                     <ViewsText>{viewCount} views</ViewsText>\n//                     <ViewsText>{postedAt} ago</ViewsText>\n//                   </ViewsAndPostedContainer>\n//                   <div>\n//                     <Button\n//                       type=\"button\"\n//                       theme={likeIsActive}\n//                       onClick={this.updateLikeState}\n//                     >\n//                       <BiLike size={20} style={{ paddingTop: \"6px\" }} />\n//                       Like\n//                     </Button>\n//                     <Button\n//                       type=\"button\"\n//                       theme={dislikeIsActive}\n//                       onClick={this.updateDislikeState}\n//                     >\n//                       <BiDislike size={20} style={{ paddingTop: \"6px\" }} />\n//                       Dislike\n//                     </Button>\n//                     <SavedVideosContext.Consumer>\n//                       {(val) => {\n//                         const { updateSave, savedVideosList } = val;\n//                         const present = savedVideosList.find(\n//                           (each) => each.id === id\n//                         );\n//                         const saveIsActive = present ? \"active\" : \"not-active\";\n//                         const saveText = present ? \"Saved\" : \"Save\";\n//                         return (\n//                           <Button\n//                             type=\"button\"\n//                             theme={saveIsActive}\n//                             onClick={() => updateSave(videoDetails)}\n//                           >\n//                             <RiMenuAddLine\n//                               size={20}\n//                               style={{ paddingTop: \"6px\" }}\n//                             />\n//                             {saveText}\n//                           </Button>\n//                         );\n//                       }}\n//                     </SavedVideosContext.Consumer>\n//                   </div>\n//                 </LikesAndViewsContainer>\n//                 <hr />\n//                 <ChannelDetails>\n//                   <ChannelLogo src={profileImageUrl} alt=\"channel logo\" />\n//                   <div>\n//                     <ChannelDetailsText theme={theme}>\n//                       {name}\n//                     </ChannelDetailsText>\n//                     <ChannelDetailsText2>{subscriberCount}</ChannelDetailsText2>\n//                   </div>\n//                 </ChannelDetails>\n//                 <VideoDescriptionText theme={theme}>\n//                   {description}\n//                 </VideoDescriptionText>\n//               </VideoTextContainer>\n//             </VideoDetailContainer>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   };\n\n//   getFailureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? \"https://assets.ccbp.in/frontend/react-js/nxt-watch-failure-view-dark-theme-img.png\"\n//           : \"https://assets.ccbp.in/frontend/react-js/nxt-watch-failure-view-light-theme-img.png\";\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText as=\"p\" theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again.\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideoDetails}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.successView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           return (\n//             <>\n//               <Header />\n//               <MainBody>\n//                 <SidebarContainer>\n//                   <Sidebar />\n//                 </SidebarContainer>\n//                 <VideoItemDetailsContainer\n//                   data-testid=\"videoItemDetails\"\n//                   theme={theme}\n//                 >\n//                   {this.renderUIBasedOnAPIStatus()}\n//                 </VideoItemDetailsContainer>\n//               </MainBody>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default VideoItemDetails;","map":{"version":3,"names":[],"sources":["/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/VideoItemDetails/index.tsx"],"sourcesContent":["// import { Component } from \"react\";\n\n// import { formatDistanceToNow } from \"date-fns\";\n\n// import { BiLike, BiDislike } from \"react-icons/bi\";\n\n// import { RiMenuAddLine } from \"react-icons/ri\";\n\n// import ReactPlayer from \"react-player\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import Header from \"../Header\";\n\n// import Sidebar from \"../Sidebar\";\n\n// import SavedVideosContext from \"../../Context/SavedVideosContext\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// import {\n//   MainBody,\n//   SidebarContainer,\n//   FailureImg,\n//   FailureContainer,\n//   FailureText,\n//   RetryButton,\n//   LoaderContainer,\n//   VideoItemDetailsContainer,\n//   PlayerContainer,\n//   VideoDetailContainer,\n//   VideoTextContainer,\n//   VideoTitle,\n//   ViewsAndPostedContainer,\n//   LikesAndViewsContainer,\n//   ViewsText,\n//   Button,\n//   ChannelLogo,\n//   ChannelDetails,\n//   ChannelDetailsText,\n//   ChannelDetailsText2,\n//   VideoDescriptionText,\n// } from \"./styledComponents\";\n\n// class VideoItemDetails extends Component {\n//   state = {\n//     apiStatus: apiStatusConstants.initial,\n//     videoDetails: {},\n//     like: false,\n//     dislike: false,\n//   };\n\n//   componentDidMount() {\n//     this.getVideoDetails();\n//   }\n\n//   updateLikeState = () => {\n//     this.setState((previousState) => ({\n//       like: !previousState.like,\n//       dislike: false,\n//     }));\n//   };\n\n//   updateDislikeState = () => {\n//     this.setState((previousState) => ({\n//       dislike: !previousState.dislike,\n//       like: false,\n//     }));\n//   };\n\n//   getVideoDetails = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const { match } = this.props;\n//     const { params } = match;\n//     const { id } = params;\n\n//     const url = `https://apis.ccbp.in/videos/${id}`;\n//     const jwtToken = getCookie();\n\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetch(url, options);\n//     const data = await response.json();\n\n//     if (response.ok) {\n//       const updatedData = {\n//         videoDetails: data.video_details,\n//       };\n//       const { videoDetails } = updatedData;\n//       const updated = {\n//         id: videoDetails.id,\n//         description: videoDetails.description,\n//         publishedAt: videoDetails.published_at,\n//         thumbnailUrl: videoDetails.thumbnail_url,\n//         title: videoDetails.title,\n//         videoUrl: videoDetails.video_url,\n//         viewCount: videoDetails.view_count,\n//         channel: {\n//           name: videoDetails.channel.name,\n//           profileImageUrl: videoDetails.channel.profile_image_url,\n//           subscriberCount: videoDetails.channel.subscriber_count,\n//         },\n//       };\n//       this.setState({\n//         videoDetails: updated,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   successView = () => {\n//     const { videoDetails, like, dislike } = this.state;\n//     const {\n//       publishedAt,\n//       title,\n//       videoUrl,\n//       viewCount,\n//       channel,\n//       description,\n//       id,\n//     } = videoDetails;\n\n//     const { name, profileImageUrl, subscriberCount } = channel;\n//     let postedAt = formatDistanceToNow(new Date(publishedAt));\n//     const postedAtList = postedAt.split(\" \");\n\n//     if (postedAtList.length === 3) {\n//       postedAtList.shift();\n//       postedAt = postedAtList.join(\" \");\n//     }\n\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           const likeIsActive = like ? \"active\" : \"not-active\";\n//           const dislikeIsActive = dislike ? \"active\" : \"not-active\";\n//           return (\n//             <VideoDetailContainer>\n//               <PlayerContainer>\n//                 <ReactPlayer\n//                   url={videoUrl}\n//                   controls\n//                   width=\"100%\"\n//                   height=\"100%\"\n//                 />\n//               </PlayerContainer>\n//               <VideoTextContainer>\n//                 <VideoTitle theme={theme}>{title}</VideoTitle>\n//                 <LikesAndViewsContainer>\n//                   <ViewsAndPostedContainer>\n//                     <ViewsText>{viewCount} views</ViewsText>\n//                     <ViewsText>{postedAt} ago</ViewsText>\n//                   </ViewsAndPostedContainer>\n//                   <div>\n//                     <Button\n//                       type=\"button\"\n//                       theme={likeIsActive}\n//                       onClick={this.updateLikeState}\n//                     >\n//                       <BiLike size={20} style={{ paddingTop: \"6px\" }} />\n//                       Like\n//                     </Button>\n//                     <Button\n//                       type=\"button\"\n//                       theme={dislikeIsActive}\n//                       onClick={this.updateDislikeState}\n//                     >\n//                       <BiDislike size={20} style={{ paddingTop: \"6px\" }} />\n//                       Dislike\n//                     </Button>\n//                     <SavedVideosContext.Consumer>\n//                       {(val) => {\n//                         const { updateSave, savedVideosList } = val;\n//                         const present = savedVideosList.find(\n//                           (each) => each.id === id\n//                         );\n//                         const saveIsActive = present ? \"active\" : \"not-active\";\n//                         const saveText = present ? \"Saved\" : \"Save\";\n//                         return (\n//                           <Button\n//                             type=\"button\"\n//                             theme={saveIsActive}\n//                             onClick={() => updateSave(videoDetails)}\n//                           >\n//                             <RiMenuAddLine\n//                               size={20}\n//                               style={{ paddingTop: \"6px\" }}\n//                             />\n//                             {saveText}\n//                           </Button>\n//                         );\n//                       }}\n//                     </SavedVideosContext.Consumer>\n//                   </div>\n//                 </LikesAndViewsContainer>\n//                 <hr />\n//                 <ChannelDetails>\n//                   <ChannelLogo src={profileImageUrl} alt=\"channel logo\" />\n//                   <div>\n//                     <ChannelDetailsText theme={theme}>\n//                       {name}\n//                     </ChannelDetailsText>\n//                     <ChannelDetailsText2>{subscriberCount}</ChannelDetailsText2>\n//                   </div>\n//                 </ChannelDetails>\n//                 <VideoDescriptionText theme={theme}>\n//                   {description}\n//                 </VideoDescriptionText>\n//               </VideoTextContainer>\n//             </VideoDetailContainer>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   };\n\n//   getFailureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? \"https://assets.ccbp.in/frontend/react-js/nxt-watch-failure-view-dark-theme-img.png\"\n//           : \"https://assets.ccbp.in/frontend/react-js/nxt-watch-failure-view-light-theme-img.png\";\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText as=\"p\" theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again.\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideoDetails}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.successView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           return (\n//             <>\n//               <Header />\n//               <MainBody>\n//                 <SidebarContainer>\n//                   <Sidebar />\n//                 </SidebarContainer>\n//                 <VideoItemDetailsContainer\n//                   data-testid=\"videoItemDetails\"\n//                   theme={theme}\n//                 >\n//                   {this.renderUIBasedOnAPIStatus()}\n//                 </VideoItemDetailsContainer>\n//               </MainBody>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default VideoItemDetails;\n"],"mappings":"AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}