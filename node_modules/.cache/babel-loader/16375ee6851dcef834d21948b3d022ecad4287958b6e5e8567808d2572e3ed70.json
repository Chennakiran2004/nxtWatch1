{"ast":null,"code":"// import { Component } from \"react\";\n\n// import { AiFillFire } from \"react-icons/ai\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import TrendingVideoCard from \"../TrendingVideoCard\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/logoUrl\";\n\n// import Layout from \"../Layout\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// import {\n//   MainBody,\n//   TrendingContainer,\n//   TrendingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   FailureContainer,\n//   FailureImg,\n//   FailureText,\n//   RetryButton,\n//   VideosList,\n//   TrendingMainContainer,\n// } from \"./styledComponents\";\n\n// class Trending extends Component {\n//   state = {\n//     videosList: [],\n//     apiStatus: apiStatusConstants.initial,\n//   };\n\n//   componentDidMount = () => {\n//     this.getVideos();\n//   };\n\n//   getVideos = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie(\"jwt_token\");\n//     const url = \"https://apis.ccbp.in/videos/trending\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetch(url, options);\n//     const data = await response.json();\n\n//     if (response.ok === true) {\n//       const updatedData = data.videos.map((eachItem) => ({\n//         id: eachItem.id,\n//         channel: {\n//           name: eachItem.channel.name,\n//           profileImageUrl: eachItem.channel.profile_image_url,\n//         },\n//         publishedAt: eachItem.published_at,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({\n//         apiStatus: apiStatusConstants.failure,\n//       });\n//     }\n//   };\n\n//   successView = () => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {videosList.map((each) => (\n//           <TrendingVideoCard videoDetails={each} key={each.id} />\n//         ))}\n//       </VideosList>\n//     );\n//   };\n\n//   failureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme} as=\"p\">\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnaAPIStatue = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.successView();\n//       case apiStatusConstants.failure:\n//         return this.failureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           return (\n//             <>\n//               <Layout>\n//                 <TrendingMainContainer data-testid=\"trending\" theme={theme}>\n//                   <MainBody>\n//                     <TrendingContainer>\n//                       <TrendingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <AiFillFire size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Trending</MenuHeading>\n//                       </TrendingMenuContainer>\n//                       {this.renderUIBasedOnaAPIStatue()}\n//                     </TrendingContainer>\n//                   </MainBody>\n//                 </TrendingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Trending;","map":{"version":3,"names":[],"sources":["/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/Trending/index.tsx"],"sourcesContent":["// import { Component } from \"react\";\n\n// import { AiFillFire } from \"react-icons/ai\";\n\n// import Loader from \"react-loader-spinner\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import TrendingVideoCard from \"../TrendingVideoCard\";\n\n// import ThemeContext from \"../../Context/ThemeContext\";\n\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/logoUrl\";\n\n// import Layout from \"../Layout\";\n\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n\n// import {\n//   MainBody,\n//   TrendingContainer,\n//   TrendingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   FailureContainer,\n//   FailureImg,\n//   FailureText,\n//   RetryButton,\n//   VideosList,\n//   TrendingMainContainer,\n// } from \"./styledComponents\";\n\n// class Trending extends Component {\n//   state = {\n//     videosList: [],\n//     apiStatus: apiStatusConstants.initial,\n//   };\n\n//   componentDidMount = () => {\n//     this.getVideos();\n//   };\n\n//   getVideos = async () => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie(\"jwt_token\");\n//     const url = \"https://apis.ccbp.in/videos/trending\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response = await fetch(url, options);\n//     const data = await response.json();\n\n//     if (response.ok === true) {\n//       const updatedData = data.videos.map((eachItem) => ({\n//         id: eachItem.id,\n//         channel: {\n//           name: eachItem.channel.name,\n//           profileImageUrl: eachItem.channel.profile_image_url,\n//         },\n//         publishedAt: eachItem.published_at,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({\n//         apiStatus: apiStatusConstants.failure,\n//       });\n//     }\n//   };\n\n//   successView = () => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {videosList.map((each) => (\n//           <TrendingVideoCard videoDetails={each} key={each.id} />\n//         ))}\n//       </VideosList>\n//     );\n//   };\n\n//   failureView = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme} as=\"p\">\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   loader = () => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         return (\n//           <LoaderContainer className=\"loader-container\" data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnaAPIStatue = () => {\n//     const { apiStatus } = this.state;\n\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.successView();\n//       case apiStatusConstants.failure:\n//         return this.failureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n\n//           return (\n//             <>\n//               <Layout>\n//                 <TrendingMainContainer data-testid=\"trending\" theme={theme}>\n//                   <MainBody>\n//                     <TrendingContainer>\n//                       <TrendingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <AiFillFire size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Trending</MenuHeading>\n//                       </TrendingMenuContainer>\n//                       {this.renderUIBasedOnaAPIStatue()}\n//                     </TrendingContainer>\n//                   </MainBody>\n//                 </TrendingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Trending;\n"],"mappings":"AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}