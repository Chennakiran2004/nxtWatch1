{"ast":null,"code":"// import React, { Component, ReactElement } from \"react\";\n// import Loader from \"react-loader-spinner\";\n// import { IoLogoGameControllerB } from \"react-icons/io\";\n// import ThemeContext from \"../../Context/ThemeContext\";\n// import GamingBody from \"../GamingBody\";\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n// import Layout from \"../Layout\";\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/failureImageUrl\";\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n// import {\n//   GamingMainContainer,\n//   MainBody,\n//   GamingContainer,\n//   GamingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   VideosList,\n//   FailureContainer,\n//   FailureText,\n//   FailureImg,\n//   RetryButton,\n// } from \"./styledComponents\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi, { APIResponse } from \"../../Constants/fetchUtilities\";\n\n// interface VideoDetails {\n//   id: string;\n//   thumbnailUrl: string;\n//   title: string;\n//   viewCount: number;\n// }\n\n// type GamingState = {\n//   apiStatus: string;\n//   videosList: VideoDetails[];\n// };\n\n// class Gaming extends Component<{}, GamingState> {\n//   state: GamingState = {\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount(): void {\n//     this.getVideos();\n//   }\n\n//   loader = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         return (\n//           <LoaderContainer theme={theme} data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//           // <h1>Loader</h1>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async (): Promise<void> => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie();\n\n//     const url = \"https://apis.ccbp.in/videos/gaming\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response: APIResponse = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem: any) => ({\n//         id: eachItem.id,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   getSuccessView = (): ReactElement => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {/* {videosList.map((eachVideo) => (\n//           <GamingBody key={eachVideo.id} gameDetails={eachVideo} />\n//         ))} */}\n//         videosList\n//       </VideosList>\n//     );\n//   };\n\n//   getFailureView = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value): ReactElement => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = (): ReactElement => {\n//     const { apiStatus } = this.state;\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render(): ReactElement {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           return (\n//             <>\n//               <Layout>\n//                 <GamingMainContainer data-testid=\"gaming\" theme={theme}>\n//                   <MainBody>\n//                     <GamingContainer>\n//                       <GamingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <IoLogoGameControllerB size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Gaming</MenuHeading>\n//                       </GamingMenuContainer>\n//                       {this.renderUIBasedOnAPIStatus()}\n//                     </GamingContainer>\n//                   </MainBody>\n//                 </GamingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Gaming;","map":{"version":3,"names":[],"sources":["/home/chenna/Downloads/NxtWatchFolder/NxtWatch/src/components/Gaming/index.tsx"],"sourcesContent":["// import React, { Component, ReactElement } from \"react\";\n// import Loader from \"react-loader-spinner\";\n// import { IoLogoGameControllerB } from \"react-icons/io\";\n// import ThemeContext from \"../../Context/ThemeContext\";\n// import GamingBody from \"../GamingBody\";\n// import apiStatusConstants from \"../../Constants/apiStatusConstants\";\n// import Layout from \"../Layout\";\n// import {\n//   darkThemeFailureImgUrl,\n//   lightThemeFailureImgUrl,\n// } from \"../../Constants/failureImageUrl\";\n// import getAuthHeaders from \"../../Constants/getAuthHeaders\";\n// import {\n//   GamingMainContainer,\n//   MainBody,\n//   GamingContainer,\n//   GamingMenuContainer,\n//   IconContainer,\n//   MenuHeading,\n//   LoaderContainer,\n//   VideosList,\n//   FailureContainer,\n//   FailureText,\n//   FailureImg,\n//   RetryButton,\n// } from \"./styledComponents\";\n\n// import { getCookie } from \"../../Constants/StorageUtilities\";\n\n// import fetchApi, { APIResponse } from \"../../Constants/fetchUtilities\";\n\n// interface VideoDetails {\n//   id: string;\n//   thumbnailUrl: string;\n//   title: string;\n//   viewCount: number;\n// }\n\n// type GamingState = {\n//   apiStatus: string;\n//   videosList: VideoDetails[];\n// };\n\n// class Gaming extends Component<{}, GamingState> {\n//   state: GamingState = {\n//     apiStatus: apiStatusConstants.initial,\n//     videosList: [],\n//   };\n\n//   componentDidMount(): void {\n//     this.getVideos();\n//   }\n\n//   loader = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value) => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         return (\n//           <LoaderContainer theme={theme} data-testid=\"loader\">\n//             <Loader\n//               type=\"ThreeDots\"\n//               color={isDarkTheme ? \"#ffffff\" : \"#000000\"}\n//               height=\"50\"\n//               width=\"50\"\n//             />\n//           </LoaderContainer>\n//           // <h1>Loader</h1>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   getVideos = async (): Promise<void> => {\n//     this.setState({ apiStatus: apiStatusConstants.inProgress });\n\n//     const jwtToken = getCookie();\n\n//     const url = \"https://apis.ccbp.in/videos/gaming\";\n//     const options = {\n//       headers: getAuthHeaders(jwtToken),\n//       method: \"GET\",\n//     };\n\n//     const response: APIResponse = await fetchApi(url, options);\n\n//     if (response.success) {\n//       const updatedData = response.data.videos.map((eachItem: any) => ({\n//         id: eachItem.id,\n//         thumbnailUrl: eachItem.thumbnail_url,\n//         title: eachItem.title,\n//         viewCount: eachItem.view_count,\n//       }));\n//       this.setState({\n//         videosList: updatedData,\n//         apiStatus: apiStatusConstants.success,\n//       });\n//     } else {\n//       this.setState({ apiStatus: apiStatusConstants.failure });\n//     }\n//   };\n\n//   getSuccessView = (): ReactElement => {\n//     const { videosList } = this.state;\n\n//     return (\n//       <VideosList>\n//         {/* {videosList.map((eachVideo) => (\n//           <GamingBody key={eachVideo.id} gameDetails={eachVideo} />\n//         ))} */}\n//         videosList\n//       </VideosList>\n//     );\n//   };\n\n//   getFailureView = (): ReactElement => (\n//     <ThemeContext.Consumer>\n//       {(value): ReactElement => {\n//         const { isDarkTheme } = value;\n//         const theme = isDarkTheme ? \"dark\" : \"light\";\n//         const imgUrl = isDarkTheme\n//           ? darkThemeFailureImgUrl\n//           : lightThemeFailureImgUrl;\n\n//         return (\n//           <FailureContainer>\n//             <FailureImg src={imgUrl} alt=\"failure view\" />\n\n//             <FailureText theme={theme}>Oops! Something Went Wrong</FailureText>\n//             <FailureText theme={theme}>\n//               We are having some trouble to complete your request. Please try\n//               again\n//             </FailureText>\n//             <RetryButton type=\"button\" onClick={this.getVideos}>\n//               Retry\n//             </RetryButton>\n//           </FailureContainer>\n//         );\n//       }}\n//     </ThemeContext.Consumer>\n//   );\n\n//   renderUIBasedOnAPIStatus = (): ReactElement => {\n//     const { apiStatus } = this.state;\n//     switch (apiStatus) {\n//       case apiStatusConstants.success:\n//         return this.getSuccessView();\n//       case apiStatusConstants.failure:\n//         return this.getFailureView();\n//       case apiStatusConstants.inProgress:\n//         return this.loader();\n//       default:\n//         return <></>;\n//     }\n//   };\n\n//   render(): ReactElement {\n//     return (\n//       <ThemeContext.Consumer>\n//         {(value) => {\n//           const { isDarkTheme } = value;\n//           const theme = isDarkTheme ? \"dark\" : \"light\";\n//           return (\n//             <>\n//               <Layout>\n//                 <GamingMainContainer data-testid=\"gaming\" theme={theme}>\n//                   <MainBody>\n//                     <GamingContainer>\n//                       <GamingMenuContainer theme={theme}>\n//                         <IconContainer theme={theme}>\n//                           <IoLogoGameControllerB size={40} color=\"#ff0b37\" />\n//                         </IconContainer>\n//                         <MenuHeading theme={theme}>Gaming</MenuHeading>\n//                       </GamingMenuContainer>\n//                       {this.renderUIBasedOnAPIStatus()}\n//                     </GamingContainer>\n//                   </MainBody>\n//                 </GamingMainContainer>\n//               </Layout>\n//             </>\n//           );\n//         }}\n//       </ThemeContext.Consumer>\n//     );\n//   }\n// }\n\n// export default Gaming;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}